<?xml version="1.0" ?>
<configuration>

    <!-- 定义日志的根目录 -->
    <property name="LOG_HOME" value="src/main/resources/"/>
    <!-- 定义日志文件名称 -->
    <property name="PROJECT_NAME" value="mockcomm"/>

    <property name="MAX_FILE_SIZE" value="5GB"/>

    <property name="MAX_HISTORY" value="90"/>

    <!-- ch.qos.logback.core.ConsoleAppender 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[%-5level] %d{HH:mm:ss.SSS} [%thread] %logger{36} %line: %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- ch.qos.logback.core.rolling.RollingFileAppender 文件日志输出 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_HOME}/${PROJECT_NAME}.log</File>
        <encoder>
            <Pattern>[%-5level] %d{yyyy-MM-dd HH:mm:ss} [%thread] %logger{36} : %msg %n</Pattern>
            <charset>UTF-8</charset>  <!--解决中文乱码问题-->
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${LOG_HOME}/${PROJECT_NAME}-%d{yyyy-MM-dd}-%i.log</FileNamePattern>
            <MaxHistory>${MAX_HISTORY}</MaxHistory>
            <!--
              当日志文件超过maxFileSize指定的大小时，根据上面提到的%i进行日志文件滚动
               注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，
               必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <TimeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <MaxFileSize>${MAX_FILE_SIZE}</MaxFileSize>
            </TimeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!--
        root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
        要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->

    <!-- 将上面两个 appender 关联到我们的项目 -->
    <logger name="com.flight" level="DEBUG" additivity="false"> <!-- name 是项目包名，为了方便调试，输出 DEBUG 级别及其以上的log -->
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
    </logger>

    <!--  日志级别 -->
    <root>
        <!-- 定义了ERROR和INFO级别的日志，分别在FILE文件和控制台输出 -->
        <level value="error"/>
        <level value="info"/>
        <appender-ref ref="file"/>
        <appender-ref ref="console"/>
    </root>

</configuration>